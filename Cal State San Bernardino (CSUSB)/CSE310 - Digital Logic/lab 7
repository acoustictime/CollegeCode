

module D_FF(
	output reg Q, 
	input wire D, 
	input wire clk
);

always @ (posedge clk)
begin
	Q <= D;
end
endmodule




// name: Nibble_Reg
// desc: four bit register with output enable (low),
//			made from D flip-flops
// date: 03/05/13
// by: James Small, Zachary Fuller

module Nibble_Reg(
	input [3:0] data_in,
	input load, out_en,
	output [3:0] data_out
);

// wires between flip flops

wire [3:0] dff_out;

// tri state gates

bufif0 t0(date_out[0], dff_out[0], out_en);
bufif0 t1(date_out[1], dff_out[1], out_en);
bufif0 t2(date_out[2], dff_out[2], out_en);
bufif0 t3(date_out[3], dff_out[3], out_en);

// d flip flops

D_FF Reg_Bit_0(.Q(dff_out[0]),.D(data_in[0]),.clk(load));
D_FF Reg_Bit_1(.Q(dff_out[1]),.D(data_in[1]),.clk(load));
D_FF Reg_Bit_2(.Q(dff_out[2]),.D(data_in[2]),.clk(load));
D_FF Reg_Bit_3(.Q(dff_out[3]),.D(data_in[3]),.clk(load));

endmodule


// name: Decoder
// desc: decoder active low for outputs and enable line
// date: 03/05/13
// by: James Small, Zachary Fuller

module Decoder_df(
	output [3:0] d_out,
	input en,
	input [1:0] d_in
);

assign d_out[0] = !((!d_out[0]) && (!d_out[1]) && (!en));
assign d_out[1] = !((!d_out[0]) && (d_out[1]) && (!en));
assign d_out[2] = !((d_out[0]) && (!d_out[1]) && (!en));
assign d_out[3] = !((d_out[0]) && (d_out[1]) && (!en));

endmodule


// name: Register File
// desc:  Register file using 2 decoders and 4 Nibble Registers
// date: 03/05/13
// by: James Small, Zachary Fuller


module Register_File(
	input [3:0] data_in,
	input [1:0] read_add,write_add,
	input read_en,write_en,
	output [3:0] data_out
};

wire [3:0] read_sel, write_sel;

// decoders

Decoder_df Dec_Read(.en(read_en), .d_in(read_add), .d_out(read_sel));
Decoder_df Dec_Write(.en(write_en), .d_in(write_add), .d_out(write_sel));


// Registers

Nibble_Reg Reg_0(.data_out(date_out),.data_in(data_in),.load(write_sel[0]),.out_en(read_sel[0]);
Nibble_Reg Reg_1(.data_out(date_out),.data_in(data_in),.load(write_sel[1]),.out_en(read_sel[1]);
Nibble_Reg Reg_2(.data_out(date_out),.data_in(data_in),.load(write_sel[2]),.out_en(read_sel[2]);
Nibble_Reg Reg_3(.data_out(date_out),.data_in(data_in),.load(write_sel[3]),.out_en(read_sel[3]);


endmodule
