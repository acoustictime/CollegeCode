. CSci 375/08 SSDs
.Table Date  #	Topic (Participation 2pt)	Study pages (2 pts)	Quiz(15 pts)	Project Work(10 pts)
.Row Previous  7	Domain Model II	157-171	Q3(121-171)	-
.Row Today  8	SSDs	173-196	-	W3(Domain Model 1)
.Row Next  9	Packages	197-219	Q4(173-219)	-
.Close.Table
. Revision History
.Table Version#  Date	Description	Author
.Row 0  2005-01-03	Used boiler plate to make template	RJB
.Row 1  2005-01-31	Input section headings	RJB
.Row 2  2005-02-07	Adding Questions	RJB
.Row 3  2006-01-12	Update to 2006	RJB
.Row 4  2007-01-10	Add link to project	RJB
.Row 5  2007-02-07	Added notes on format of messages	RJB
.Row 6  2008-02-07	Added notes on SSDs and testing in C++	RJB
.Row 7  2009-03-18	Added instructions on writing messages	RJB
.Row 8  2011-01-26	Expanded syntax of messages and added PPT	RJB
.Row 9  2011-02-02	Adding Exercise stubs	RJB
.Close.Table
.Open 10 SSDs
. Introduction
SSD::="System Sequence Diagram", a way of using the $UML to model the sequences of events flowing between actors and the system under development.

SSD's clarify the steps in use cases and prepares you to design
collections of objects that `realize` a use case.

Each SSD should show a scenario with one event/response for each interaction
between an actor and the system.   These events should be thought of
as coming from the user interface into the heart of the software.
We will work out what happens inside this next week.

We will use sequence diagrams with similar form but more objects
to design our software.
The messages in the SSD will be the incoming "found" messages that we
will use to work out how objects in our program will "collaborate" to
give the response that the user/stakeholders require.

It shows a single box(object) for the whole system.  It does not show
any internals of the system.  It is a `black box` model of the system.

.Image 08SSD.gif Example of a SSD

. Powerpoint on SSDs -- old Larman book
.See http://teacher.buet.ac.bd/shahin/INFORMATION%20SYSTEM%20ANALYSIS%20AND%20DESIGN/Larman%20Chapter%209.ppt
(429 kB).

. Common error -- SSDs showing how the system works
I remove points if your SSD does not show the [:System] object and the actors.

I remove points if you draw an SSD and show objects that are inside the system.

A common error is to do design before you clarify the
steps in an SSD.  This shows up by not having a single box called [:System]
plus the actors from the use case.  The result -- I've seen dozens of these --
especially on the web -- are designs that can not work.

The purpose is to define the detailed flow of messages and data between the actors and the
system as a whole.

Once this is done it is much easier to design objects to realise each step.  Do this
later!

. Messages  and data
Messages turn up a lot in OO programs: in $SSD, interaction diagrams, and in design class diagrams.

You should use a strict syntax for messages in UML diagrams.
.As_is 		login(id,password)
.As_is 		logout()
.As_is 		findClassesWith(name)
.As_is 		registerIn(me, class)
.As_is 		pick(itemNumber)
.As_is 		createMailMessage(subject, replyTo, message, signature)
You aim to be a precise as possible.  The idea is to uncover the details that can kill
a project, not to slide them underneath a rug.

Here is the syntax of function calls:
message::= $name "(" $data ")".
The parentheses are important. Do not omit them.
.As_is 	 login(userId, password)

message_with_response::= identifier ":=" $message,
Useful when something valuable is returned by when a message is sent.
.As_is 	 reply:=sendEmail(to,subject,body)
.As_is 	 music:=playSelectionFromList(selection)
You can also use a "return" arrows that are dashed and have an open arrowhead.
Note -- omit responses that merely say that the message has been handled!
$KISS!

Response are just objects.  They are $data.
The data (objects) are sent back in response
to a message:
.As_is 		confirmRegistration
.As_is 		listOfCourse
.As_is 		OK
.As_is 		MessageOfTheDay
.As_is 		acknowledgement, rendered_page
These are put on dashed arrows with an open "stick" arrowhead.

Note -- in an SSD you can return several objects inside a
single response.  When designing the internals of a program
you need to be aware that programming languages may require you to pack
all the response to a message into a single object.  
But keep this out of domain models and SSDs! All practical
languages support vectors, lists, sets, etc. in some form or other.
You can add multiplicities like "[*]" and properties like "{set}" to data
descriptions.

data::= $empty | $datum | $datum "," $datum "," .... | ...
The data is empty, or an identifier, or a list of identifiers.

You can also specify the class of the data like this   
datum::= $identifier $O(":" className #("[" multiplicity "]" | "{" property "}")),
add the type after a colon and then any number of multiplicities and properties as needed.
.As_is	 	messageOfTheDay : Text
.As_is	 	cost : Money
.As_is	 	listOfCourses : Course[*]{list}

name::= event | request_for_action_by_target.
You should choose short names that either tell the reader the reason that
the message was sent or it is an instruction to the target object
to do something.
.As_is 		timeOut
.As_is 		create
.As_is 		playSelectionFromList

empty::="", indicates that the message has no data -- typically one of a small number
of events like clicking the logout button.

identifier::=lowerCaseWord # UppercaseWord, the data in a message either is an element like a number,
character, or string.  It can also identify an object.  You send an object in a message so that
the receiving object can do things to it ... like send back a response or extract more data.

Put messages on an arrow with a filled in head. Put returned objects on
lines that are dashed with an open arrowhead.

. Common Error -- Not putting the data in messages
Whne the user supplies data -- you must name it and show it in messages.  When the
system responds with data you must name it.  The names must be clear.

For example, a diagram that shows a `login` message but does not show the data used
to identify and authenticate the user is wrong. It can not work.

Even if your diagram shows a messahe "login()" sent to an object "[:User]" it
can not work -- (1) which user?  (2) How did you find it, (3) what! no password!

Again a common step is when the user elects an item in a list.  Do not
show this as a message "select()" going to an object "[:Item]", instead
.As_is 		selectItemInList(selection)
is sent to the [:System] in the SSD and it will (probably) route it to [:List]...
. Purpose of SSDs
  * Purpose: Given some use cases, refine some of their scenarios.
  * Prepare to design objects to handle use cases.
. Text -- chapter 10 
  * Fig 10.1 Artifact influences
  * 10.1 Example: NextGen SSD
  **  10.2 Definition of SSD
  ***   10.3 Motivation: why draw a SSD
  ***   10.4 Using the UML to draw a SSD: operation calls, operation data, returned values. 
  +++++ Get the arrowheads right!
  * 10.5 Relation between Use cases and SSD: one scenario per SSD.
  *** 10.6  Naming events: See $Messages above.  Keep them "essential"
-- express the intent not the actual physical action by the user.
  **  10.7 Collaborations with other systems
  10.8 SSD -> Glossary?
  10.9 Example: Monopoly SSD
  ++ Exercise: why do I give this SSD a B grade rather than an A?
  * 10.10 Process: Iterative, Evolutionary.  Mainly during elaboration.
  10.11 History.  I knew Derek Coleman and have the Fusion book in my office...
you can forget this:-(

. SSDs and C++ Testing
You can quickly create a main program that will test your design directly
from the SSD becasue testing doesn't have a complex User Interface.

For example the SSD above would lead to a C++ main Program like this
.As_is ...
.As_is #include <WhereTheClassesAreDeclared.h>
.As_is int main()
.As_is {
.As_is 	SomeClass * testObject = new SomeClass(someValues);
.As_is 	testObject->event();
.As_is 	someType response = testObject->event2(data);
.As_is 	assert ( someProperty(response) );
.As_is }
However.... you don't know what "SomeClass" will be until you've
designed the internal interactions.  See 
.See ./10.html
later.
.Close SSDs
.Open 11 Operation Contracts
  * Work out how operations in the SSD effect the system as a whole.
  ** Complex systems only!

  Artifact influences
  **  11.1 Contract: operation, cross ref, preconditions, postconditions
  * Example: enterItem
  * 11.2 Sections in an operation contract
.Box
.As_is .Open Contract name
.As_is . Operation message(argument2)
.As_is . Preconditions
.As_is . Postconditions
.As_is .Close
.Close.Box
  * 11.3 What is a `System Operation`.
  * 11.4 Post Conditions
  ** 11.5 Example
  * 11.6 Update the Domain model?
  ** 11.7 Guideline: When to use: only complicated steps in complicated systems.
  * 11.8 Guideline: How to do it
  ** 11.9 Examples from NextGen
  11.10 Example from monopoly
  11.11 UML contacts?  May use the Object Constraint Language($OCL)? Or 
formal $logic
OCL::="Object Constraint Language",
.See ../samples/ocl.html
for more details.
  Example OCL FYI
.Box
.As_is   	context FamilyTree::birth(f:Person, m:Person, bday:Date)
.As_is   		post: self.father=f and self.mother=m
.As_is   			and self.birthday = bday.
.Close.Box
  ++ I cover many ways to express, check, and process 
.Key logic
in my Formal Methods elective courses.
.See ../cs556/
  11.12 Process
  11.13 History
  11.14 Resources
.Close Operation Contracts
.Open Requirements to Design
  * Introduction
  ** 12.1  Do the right thing, do the thing right
  *** 12.2 Provoke changes early!
  12.3 How long did that take?
.Close Requirements to Design
. SSD on the web
.See http://www.comptechdoc.org/independent/uml/begin/umlsyssequence.html
(arrow heads are wrong).

What examples can you find on the internet?

. Another example SSD -- Use Case: Teacher posts grades
.List
  Teacher logs in.
  Teacher selects a course.
  Teacher posts the grades for that course.
  Teacher checks the student IDs for that course.
  (repeat above three steps for each course in turn).
  Teacher logs out.
.Close.List
UML1.4/Rational Rose 2003
.See ./08SSD2.gif
, Visio UML2.0
.See ./08SSD3.gif
, and Dia in CSci CSUSB Labs
.See ./08SSD4.png

. Questions and Answers on SSDs
.See ./08q.html
. Review Questions
.See ./08r.html
. Exercises
.See ./08x.html
. Next: Logical Packaging etc
.See ./09.html
. Next Project Iteration -- Domain Model 1
.See ./w3.html
due start of class 09.
