. CSci 375/06 Domain Model
.Table Date	#	Topic (Participation 2pt)	Study pages (2 pts)	Quiz(15 pts)	Project Work(10 pts)
.Row Previous	5	More Requirements	89-120	Q2(61-120)	-
.Row Today	6	Domain Model	121-157	-	W2(Use Case Model 1)
.Row Next	7	Domain Model II	157-171	Q3(121-171)	-
.Close.Table
. Arbitrary Rule 1:  Everything Evolves
From now one put the version number, date, and authors on all
documents.  If possible maintain a 
.Key Revision History
on all documents:
.Table Version#	Date	Description	Author
.Row 0	2005-01-03	Used boiler plate to make template	RJB
.Row 1	2005-01-24	Added section headings	RJB
.Row 2	2005-01-27	Added notes on each section heading	RJB
.Row 3	2005-01-31	Added questions and answers	RJB
.Row 4	2006-01-11	Removed Q&A and corrected a definition	RJB
.Row 5	2006-01-27	Added notes on domain model as defining a language	RJB
.Row 6	2006-01-29	Added Q&A	RJB
.Row 7	2006-12-13	Removed Q&A	RJB
.Row 8	2007-01-24	Adding Q&A	RJB
.Row 9	2007-03-20	Removed questions into 06q.html	RJB
.Row 10	2008-01-23	Corrected some typographical errors	RJB
.Row 11	2010-01-24	Corrected some more typographical errors	RJB
.Row 11	2011-12-15	Extracted classroom exercises to private file	RJB
.Close.Table
. Iteration 1
 *** Tackle difficult/risky things first in a real project.
 ** You don't eat an elephant in one bite.
 * Some Use cases will spread over a series of iterations.
 ** Inception leads to Elaboration.
. Domain Modeling I
 ** A Domain/Business Model is a UML class diagram.
 *** Not objects inside the software you are designing!
 ++++ There are NO actors or use case bubbles in a domain model.  And the only class
box in a use case must be given stereotype "<<agent>>".
 + A Domain model shows categories of real (and imaginary)
objects plus the relationships between them.

.Key UML Class Models
.Set
 Rectangular Boxes indicate sets of similar objects. 
In the UML we call collections of similar objects a class.
 Each class(box) must have a name.  It should be a singular noun phrase.
Examples: Student, Faculty, Course, Section, ...
 Some classes can have an extra compartment that lists the properties
of the objects in the class.  These are called attributes.
Examples: sid, emailId, courseNumber, sectionNumber, date, age, ...
 Links between the boxes... lines connecting them indicate relationships
between the objects.  These are called associations.  They should
have a name. Example: Teaches, Takes, Has, Describes, ...
 For each association connecting two classes for each object in a class
there is a number of associated objects in the other class.  This
called a multiplicity.  They are written at the other end of the link.
Examples: A student can be enrolled in 0 to 6 Sections and a Section can
have any number (*) of Students: 
.As_is 		Student (*)----(0..6)Section
(The UML notation puts multiplicities beside the links and omits parentheses).
.Close.Set

In class demo drawing a Domain Model of CSUSB on the board.

 + Domain Models answer these questions.
What type of things do the stakeholders talk about? How are the things
related? What are the important properties of the things.
What words appear in the requirements, and how are they related?

 *** Take care to note the UML class diagram rules!

 ++ Domain Modeling is a useful discipline that plays its part throughout
software development. In theory most domain modeling is done in
early iterations, but even when delivering a project we may discover
some previously unknown part of the world that we must think about.
In practice, Domain Modeling is often started during the systems analysis --
but is often called constructing a
.Key Conceptual Model
of a data base.

.Key Artifacts: 
The domain model influences use cases and glossary in Requirements.  
It inspires many of the classes in Design.
In turn, it may evolve to fit changes in Requirements, and as a result
of discoveries made in Design and Implementation.
See figure 9.1.

 ++ A running prototype often uncovers unexpected properties of the
domain that changes the Domain Model.

 ** Example Figure 9.2: A class diagram with classes, attributes, and 
associations. ONLY. (for now...)

 Definitions: 
Domain_Model::="A picture of the Reality that the system is embedded in".
Not a picture of a part of the System being constructed.
A Domain Model is a
.Key Visual Dictionary
of the system's environment.

 A Domain model is a visual picture of many of the terms in the Glossary.

 ++ A Domain Model defines the semantics of the stake-holder's languages by
documenting the kinds of objects involved and the roles they play in
relationships with other objects.

 The
.Key domain layer
is the part of the software design 
that directly reflects the systems environment.
It is not the same as the Domain Model.
It should be closely related to the current Domain Model.

 A
.Key data model
is a picture of the persistent data in the software system or data base.
This will overlap the Domain Model.  A domain model can include things with no
data.  A data model may picture data that is not about the domain.  Some
transient classes should be omitted in a data model.

 + In time, a full domain model becomes an
.Key ontology
defining the key words and phrases that describe the stakeholder's world.
Working on a domain model is working on the meaning of the stakeholder's
words.  A Domain Model is a partial
.Key semantics
of the "real" world.

.Key Motivation: Why model a domain?
See Exercise below!

 * Guideline: How to create a Domain Model
 * Guideline: How to find 
.Key conceptual classes.
 *** Three Strategies for uncovering classes and relationships:
.List
 Reuse existing models.
.Set
	Read the systems analysis documents and talk to the analysts.
	Simplify the DBMS's data models/ERD's.
	Listen to users and stakeholders.
	++ Use a known pattern from Model Driven Architecture.
.Close.Set
 Use the book's list of categories (stick a notelet in this page).
 Noun phrases
.Close.List
 Example: POS Domain
 Example: Monopoly

 Guidelines
.Set
 * Sketches not blueprints.
 ** Leave boxes open on the left and bottom until drafted.
 * Things will change, but you don't have to change the model.
How much will it cost to do it?
How much will you regret not doing it?
 Reports may be part of the system
or part of the domain, or both.
 You are making a map describing the territory.  Use the native's
language.
 ++ Look out for aliases: many names for one concept.
 ++ Look out for ambiguities: one name with more than one meaning.
 Some things are intangible but important
 If it is represented by text/string/number/... it's not a class. It may be an
attribute ... but only if it is interesting.
 Use description classes sometimes.
.Close.Set
. Associations
 Associations: how, when, why so few, not software but ideas, Notation

 Guideline: naming associations

 How to find associations: Categories, Names, Analysts(DFDs and ERDs).

 Examples

.Set My Advice
 ++ Use multiplicities
 -- Normalize many-many associations into new classes.
 -- Doubt 1-1 relations! They may be 1-optional, optional-optional, or
generalizations!
.Close.Set
Domain models are models
of real kickable objects.... what can you see in the classroom.
We are working on an inventory program describing stuff at CSUSB.  In groups,
list names of the kinds of object in the class room.  Can you spot any associations?
If time -- draw a shared domain model on the board.

. Questions and Answers on Domain Models
.See ./06q.html
. Review Questions
.See ./06r.html
Submit one question+answer at start of next class.
. Exercises on Domain Models
.See ./06x.html



. Project Use Case Model 1
The first requirements (use case model 1)
.See ./w2.html
are due at the start of class 07.

. Next: attributes etc in domain models
.See ./07.html
.See ./07r.html
